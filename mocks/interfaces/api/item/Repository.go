// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	models "khidr/todo/models"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// AddItemToTodo provides a mock function with given fields: todoId, title, description
func (_m *Repository) AddItemToTodo(todoId int, title string, description *string) (*int, error) {
	ret := _m.Called(todoId, title, description)

	var r0 *int
	if rf, ok := ret.Get(0).(func(int, string, *string) *int); ok {
		r0 = rf(todoId, title, description)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, string, *string) error); ok {
		r1 = rf(todoId, title, description)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteItem provides a mock function with given fields: todoId, itemId
func (_m *Repository) DeleteItem(todoId int, itemId int) (*int, error) {
	ret := _m.Called(todoId, itemId)

	var r0 *int
	if rf, ok := ret.Get(0).(func(int, int) *int); ok {
		r0 = rf(todoId, itemId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(todoId, itemId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItem provides a mock function with given fields: todoId, itemId
func (_m *Repository) GetItem(todoId int, itemId int) (*models.Item, error) {
	ret := _m.Called(todoId, itemId)

	var r0 *models.Item
	if rf, ok := ret.Get(0).(func(int, int) *models.Item); ok {
		r0 = rf(todoId, itemId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(todoId, itemId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetItemsByTodoId provides a mock function with given fields: todoId
func (_m *Repository) GetItemsByTodoId(todoId int) ([]models.Item, error) {
	ret := _m.Called(todoId)

	var r0 []models.Item
	if rf, ok := ret.Get(0).(func(int) []models.Item); ok {
		r0 = rf(todoId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Item)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(todoId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
