// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	models "khidr/todo/models"

	mock "github.com/stretchr/testify/mock"

	todo "khidr/todo/interfaces/api/todo"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *Repository) Create(_a0 models.Todo) (*int, error) {
	ret := _m.Called(_a0)

	var r0 *int
	if rf, ok := ret.Get(0).(func(models.Todo) *int); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Todo) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTodoById provides a mock function with given fields: id
func (_m *Repository) DeleteTodoById(id int) (*int, error) {
	ret := _m.Called(id)

	var r0 *int
	if rf, ok := ret.Get(0).(func(int) *int); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTodoById provides a mock function with given fields: id
func (_m *Repository) GetTodoById(id int) (*models.Todo, error) {
	ret := _m.Called(id)

	var r0 *models.Todo
	if rf, ok := ret.Get(0).(func(int) *models.Todo); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QueryTodos provides a mock function with given fields: req
func (_m *Repository) QueryTodos(req todo.QueryTodosRequest) ([]models.Todo, error) {
	ret := _m.Called(req)

	var r0 []models.Todo
	if rf, ok := ret.Get(0).(func(todo.QueryTodosRequest) []models.Todo); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(todo.QueryTodosRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTodo provides a mock function with given fields: id, title, description, isDone
func (_m *Repository) UpdateTodo(id int, title *string, description *string, isDone *bool) (*models.Todo, error) {
	ret := _m.Called(id, title, description, isDone)

	var r0 *models.Todo
	if rf, ok := ret.Get(0).(func(int, *string, *string, *bool) *models.Todo); ok {
		r0 = rf(id, title, description, isDone)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, *string, *string, *bool) error); ok {
		r1 = rf(id, title, description, isDone)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
