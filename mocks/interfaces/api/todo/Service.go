// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	models "khidr/todo/models"

	mock "github.com/stretchr/testify/mock"

	todo "khidr/todo/interfaces/api/todo"
)

// Service is an autogenerated mock type for the Service type
type Service struct {
	mock.Mock
}

// Create provides a mock function with given fields: req
func (_m *Service) Create(req todo.CreateRequest) (*int, error) {
	ret := _m.Called(req)

	var r0 *int
	if rf, ok := ret.Get(0).(func(todo.CreateRequest) *int); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(todo.CreateRequest) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: req
func (_m *Service) DeleteById(req todo.TodoByIdRequestUri) (*int, error) {
	ret := _m.Called(req)

	var r0 *int
	if rf, ok := ret.Get(0).(func(todo.TodoByIdRequestUri) *int); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*int)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(todo.TodoByIdRequestUri) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: req
func (_m *Service) GetById(req todo.TodoByIdRequestUri) (*models.Todo, error) {
	ret := _m.Called(req)

	var r0 *models.Todo
	if rf, ok := ret.Get(0).(func(todo.TodoByIdRequestUri) *models.Todo); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(todo.TodoByIdRequestUri) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields: req
func (_m *Service) List(req todo.ListRequestBody) ([]models.Todo, error) {
	ret := _m.Called(req)

	var r0 []models.Todo
	if rf, ok := ret.Get(0).(func(todo.ListRequestBody) []models.Todo); ok {
		r0 = rf(req)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(todo.ListRequestBody) error); ok {
		r1 = rf(req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: reqParam, reqbody
func (_m *Service) Update(reqParam todo.TodoByIdRequestUri, reqbody todo.UpdateTodoRequestBody) (*models.Todo, error) {
	ret := _m.Called(reqParam, reqbody)

	var r0 *models.Todo
	if rf, ok := ret.Get(0).(func(todo.TodoByIdRequestUri, todo.UpdateTodoRequestBody) *models.Todo); ok {
		r0 = rf(reqParam, reqbody)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Todo)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(todo.TodoByIdRequestUri, todo.UpdateTodoRequestBody) error); ok {
		r1 = rf(reqParam, reqbody)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
