// Package v1 provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package v1

import (
	"fmt"
	"net/http"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// CreateTodoRequestBody defines model for CreateTodoRequestBody.
type CreateTodoRequestBody struct {
	Description *string `json:"description,omitempty"`
	Title       string  `json:"title"`
}

// CreateTodoResult defines model for CreateTodoResult.
type CreateTodoResult struct {
	Id int `json:"id"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// QueryTodosRequestBody defines model for QueryTodosRequestBody.
type QueryTodosRequestBody struct {
	Description *string `json:"description,omitempty"`
	IsDone      *bool   `json:"is_done,omitempty"`
	Limit       int     `json:"limit"`
	Offset      int     `json:"offset"`
	Title       *string `json:"title,omitempty"`
}

// TodoResult defines model for TodoResult.
type TodoResult struct {
	CreatedAt   time.Time `json:"created_at"`
	Description *string   `json:"description,omitempty"`
	Id          int       `json:"id"`
	IsDone      bool      `json:"is_done"`
	Title       string    `json:"title"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// UpdateTodoRequestBody defines model for UpdateTodoRequestBody.
type UpdateTodoRequestBody struct {
	Description *string `json:"description,omitempty"`
	IsDone      *bool   `json:"is_done,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// UpdateTodoResult defines model for UpdateTodoResult.
type UpdateTodoResult struct {
	CreatedAt   time.Time `json:"created_at"`
	Description *string   `json:"description,omitempty"`
	Id          int       `json:"id"`
	IsDone      bool      `json:"is_done"`
	Title       string    `json:"title"`
	UpdatedAt   time.Time `json:"updated_at"`
}

// CreateTodoJSONBody defines parameters for CreateTodo.
type CreateTodoJSONBody CreateTodoRequestBody

// QueryTodosJSONBody defines parameters for QueryTodos.
type QueryTodosJSONBody QueryTodosRequestBody

// UpdateTodoJSONBody defines parameters for UpdateTodo.
type UpdateTodoJSONBody UpdateTodoRequestBody

// CreateTodoJSONRequestBody defines body for CreateTodo for application/json ContentType.
type CreateTodoJSONRequestBody CreateTodoJSONBody

// QueryTodosJSONRequestBody defines body for QueryTodos for application/json ContentType.
type QueryTodosJSONRequestBody QueryTodosJSONBody

// UpdateTodoJSONRequestBody defines body for UpdateTodo for application/json ContentType.
type UpdateTodoJSONRequestBody UpdateTodoJSONBody

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create Todo
	// (POST /todo)
	CreateTodo(w http.ResponseWriter, r *http.Request)
	// Get Todos by Filter
	// (POST /todo/query)
	QueryTodos(w http.ResponseWriter, r *http.Request)
	// Get Todo By Id
	// (GET /todo/{id})
	GetTodoById(w http.ResponseWriter, r *http.Request, id int)
	// Update Todo
	// (PUT /todo/{id})
	UpdateTodo(w http.ResponseWriter, r *http.Request, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.HandlerFunc) http.HandlerFunc

// CreateTodo operation middleware
func (siw *ServerInterfaceWrapper) CreateTodo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateTodo(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// QueryTodos operation middleware
func (siw *ServerInterfaceWrapper) QueryTodos(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.QueryTodos(w, r)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// GetTodoById operation middleware
func (siw *ServerInterfaceWrapper) GetTodoById(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetTodoById(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

// UpdateTodo operation middleware
func (siw *ServerInterfaceWrapper) UpdateTodo(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", chi.URLParam(r, "id"), &id)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	var handler = func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UpdateTodo(w, r, id)
	}

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/todo", wrapper.CreateTodo)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/todo/query", wrapper.QueryTodos)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/todo/{id}", wrapper.GetTodoById)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/todo/{id}", wrapper.UpdateTodo)
	})

	return r
}

